{"version":3,"file":"tag.cjs","sources":["../lib/tag.ts"],"sourcesContent":["export type AttrsClassesStyles = string | { [key: string]: string };\r\n\r\nconst toFlatArray = (children): (HTMLElement | string)[] => Array.isArray(children) ? children.flat(Infinity) : [children];\r\n\r\nconst tag = <T>(tagName: string, config: AttrsClassesStyles = {}, children?: T): HTMLElement => {\r\n    const el = document.createElement(tagName);\r\n    if (typeof config === 'string') {\r\n        config?.includes(':') ? el.setAttribute('style', config) : el.className = config;\r\n    } else {\r\n        Object.entries(config).forEach(([key, value]) => el.setAttribute(key, value));\r\n    }\r\n    el.append(...toFlatArray(children).filter(c => c));\r\n    return el;\r\n}\r\n\r\nconst event = <T>(eventName: string, callback: EventListener | EventListenerObject, children: T): T => {\r\n    toFlatArray(children).forEach(c => c instanceof HTMLElement && c.addEventListener(eventName, callback));\r\n    return children;\r\n}\r\n\r\nexport { tag, event };\r\n"],"names":["toFlatArray","children","Array","isArray","flat","Infinity","eventName","callback","forEach","c","HTMLElement","addEventListener","tagName","config","el","document","createElement","includes","setAttribute","className","Object","entries","append","filter"],"mappings":"AAEA,IAAMA,EAAc,SAACC,UAAuCC,MAAMC,QAAQF,GAAYA,EAASG,KAAKC,UAAY,CAACJ,kBAanG,SAAIK,EAAmBC,EAA+CN,GAEhF,OADAD,EAAYC,GAAUO,QAAQ,SAAAC,UAAKA,aAAaC,aAAeD,EAAEE,iBAAiBL,EAAWC,KACtFN,eAbC,SAAIW,EAAiBC,EAAiCZ,YAAjCY,IAAAA,EAA6B,IAC1D,MAAMC,EAAKC,SAASC,cAAcJ,GAOlC,MANsB,iBAAXC,WACPA,MAAQI,SAAS,KAAOH,EAAGI,aAAa,QAASL,GAAUC,EAAGK,UAAYN,EAE1EO,OAAOC,QAAQR,GAAQL,QAAQ,mBAAkBM,EAAGI,0BAExDJ,EAAGQ,aAAHR,EAAad,EAAYC,GAAUsB,OAAO,SAAAd,UAAKA,KACxCK"}