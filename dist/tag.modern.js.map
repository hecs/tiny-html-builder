{"version":3,"file":"tag.modern.js","sources":["../lib/tag.ts"],"sourcesContent":["export type AttrsClassesStyles = string | { [key: string]: string };\r\n\r\nconst toFlatArray = (children): (HTMLElement | string)[] => Array.isArray(children) ? children.flat(Infinity) : [children];\r\n\r\nconst tag = <T>(tagName: string, config: AttrsClassesStyles = {}, children?: T): HTMLElement => {\r\n    const el = document.createElement(tagName);\r\n    if (typeof config === 'string') {\r\n        config?.includes(':') ? el.setAttribute('style', config) : el.className = config;\r\n    } else {\r\n        Object.entries(config).forEach(([key, value]) => el.setAttribute(key, value));\r\n    }\r\n    el.append(...toFlatArray(children).filter(c => c));\r\n    return el;\r\n}\r\n\r\nconst event = <T>(eventName: string, callback: EventListener | EventListenerObject, children: T): T => {\r\n    toFlatArray(children).forEach(c => c instanceof HTMLElement && c.addEventListener(eventName, callback));\r\n    return children;\r\n}\r\n\r\nexport { tag, event };\r\n"],"names":["toFlatArray","children","Array","isArray","flat","Infinity","tag","tagName","config","el","document","createElement","includes","setAttribute","className","Object","entries","forEach","key","value","append","filter","c","event","eventName","callback","HTMLElement","addEventListener"],"mappings":"AAEA,MAAMA,EAAeC,GAAuCC,MAAMC,QAAQF,GAAYA,EAASG,KAAKC,UAAY,CAACJ,GAE3GK,EAAM,CAAIC,EAAiBC,EAA6B,GAAIP,KAC9D,MAAMQ,EAAKC,SAASC,cAAcJ,GAOlC,MANsB,iBAAXC,QACPA,GAAAA,EAAQI,SAAS,KAAOH,EAAGI,aAAa,QAASL,GAAUC,EAAGK,UAAYN,EAE1EO,OAAOC,QAAQR,GAAQS,QAAQ,EAAEC,EAAKC,KAAWV,EAAGI,aAAaK,EAAKC,IAE1EV,EAAGW,UAAUpB,EAAYC,GAAUoB,OAAOC,GAAKA,IACxCb,GAGLc,EAAQ,CAAIC,EAAmBC,EAA+CxB,KAChFD,EAAYC,GAAUgB,QAAQK,GAAKA,aAAaI,aAAeJ,EAAEK,iBAAiBH,EAAWC,IACtFxB"}