{"version":3,"file":"tag.modern.js","sources":["../lib/tag.ts"],"sourcesContent":["import type { h } from \"preact\";\n\nexport type AttrsClassesStyles = string | (Omit<h.JSX.HTMLAttributes, 'ref'> & {ref?: string});\n\nconst toFlatArray = (children): (HTMLElWithRef | string)[] => Array.isArray(children) ? children.flat(Infinity) : [children];\n\nexport const tag = <T>(tagName: string, config: AttrsClassesStyles = {}, children?: T): HTMLElement => {\n    const el = document.createElement(tagName) as HTMLElWithRef;\n    if (typeof config === 'string') {\n        config?.includes(':') ? el.setAttribute('style', config) : el.className = config;\n    } else if (config) {\n        Object.entries(config).forEach(([key, value]) => key === \"style\" && typeof value !== 'string' ? Object.assign(el.style, value) : el.setAttribute(key, value));\n        config.ref && ((el as any).ref = config.ref)\n    }\n    el.append(...toFlatArray(children).filter(c => c));\n    return el;\n}\n\nexport const event = <T>(eventName: string, callback: EventListener | EventListenerObject, children: T): T => {\n    toFlatArray(children).forEach(c => c instanceof HTMLElement && c.addEventListener(eventName, callback));\n    return children;\n}\n\ntype HTMLElWithRef = (HTMLElement & { ref?: string });\n\nexport function getRefs(e: HTMLElWithRef | HTMLElWithRef[], refs = {}): { [key: string]: any } {\n    if (Array.isArray(e)) {\n        e.forEach(_e => getRefs(_e));\n        return;\n    }\n    e.ref && (refs[e.ref] = e);\n    Array.from(e.children).forEach((c) => {\n        getRefs(c as HTMLElWithRef, refs)\n    });\n    return refs;\n}\n\nexport const a = (config: AttrsClassesStyles, children?) => tag(\"a\", config, children) as HTMLAnchorElement;\nexport const area = (config: AttrsClassesStyles, children?) => tag(\"area\", config, children) as HTMLAreaElement;\nexport const article = (config: AttrsClassesStyles, children?) => tag(\"article\", config, children) as HTMLElement;\nexport const audio = (config: AttrsClassesStyles, children?) => tag(\"audio\", config, children) as HTMLAudioElement;\nexport const base = (config: AttrsClassesStyles, children?) => tag(\"base\", config, children) as HTMLBaseElement;\nexport const blockquote = (config: AttrsClassesStyles, children?) => tag(\"blockquote\", config, children) as HTMLQuoteElement;\nexport const body = (config: AttrsClassesStyles, children?) => tag(\"body\", config, children) as HTMLBodyElement;\nexport const br = (config: AttrsClassesStyles, children?) => tag(\"br\", config, children) as HTMLBRElement;\nexport const button = (config: AttrsClassesStyles, children?) => tag(\"button\", config, children) as HTMLButtonElement;\nexport const canvas = (config: AttrsClassesStyles, children?) => tag(\"canvas\", config, children) as HTMLCanvasElement;\nexport const caption = (config: AttrsClassesStyles, children?) => tag(\"caption\", config, children) as HTMLTableCaptionElement;\nexport const col = (config: AttrsClassesStyles, children?) => tag(\"col\", config, children) as HTMLTableColElement;\nexport const colgroup = (config: AttrsClassesStyles, children?) => tag(\"colgroup\", config, children) as HTMLTableColElement;\nexport const data = (config: AttrsClassesStyles, children?) => tag(\"data\", config, children) as HTMLDataElement;\nexport const datalist = (config: AttrsClassesStyles, children?) => tag(\"datalist\", config, children) as HTMLDataListElement;\nexport const del = (config: AttrsClassesStyles, children?) => tag(\"del\", config, children) as HTMLModElement;\nexport const details = (config: AttrsClassesStyles, children?) => tag(\"details\", config, children) as HTMLDetailsElement;\nexport const dialog = (config: AttrsClassesStyles, children?) => tag(\"dialog\", config, children) as HTMLDialogElement;\nexport const dir = (config: AttrsClassesStyles, children?) => tag(\"dir\", config, children) as HTMLDirectoryElement;\nexport const div = (config: AttrsClassesStyles, children?) => tag(\"div\", config, children) as HTMLDivElement;\nexport const dl = (config: AttrsClassesStyles, children?) => tag(\"dl\", config, children) as HTMLDListElement;\nexport const embed = (config: AttrsClassesStyles, children?) => tag(\"embed\", config, children) as HTMLEmbedElement;\nexport const fieldset = (config: AttrsClassesStyles, children?) => tag(\"fieldset\", config, children) as HTMLFieldSetElement;\nexport const font = (config: AttrsClassesStyles, children?) => tag(\"font\", config, children) as HTMLFontElement;\nexport const footer = (config: AttrsClassesStyles, children?) => tag(\"footer\", config, children) as HTMLElement;\nexport const form = (config: AttrsClassesStyles, children?) => tag(\"form\", config, children) as HTMLFormElement;\nexport const frame = (config: AttrsClassesStyles, children?) => tag(\"frame\", config, children) as HTMLFrameElement;\nexport const frameset = (config: AttrsClassesStyles, children?) => tag(\"frameset\", config, children) as HTMLFrameSetElement;\nexport const h1 = (config: AttrsClassesStyles, children?) => tag(\"h1\", config, children) as HTMLHeadingElement;\nexport const h2 = (config: AttrsClassesStyles, children?) => tag(\"h2\", config, children) as HTMLHeadingElement;\nexport const h3 = (config: AttrsClassesStyles, children?) => tag(\"h3\", config, children) as HTMLHeadingElement;\nexport const h4 = (config: AttrsClassesStyles, children?) => tag(\"h4\", config, children) as HTMLHeadingElement;\nexport const h5 = (config: AttrsClassesStyles, children?) => tag(\"h5\", config, children) as HTMLHeadingElement;\nexport const h6 = (config: AttrsClassesStyles, children?) => tag(\"h6\", config, children) as HTMLHeadingElement;\nexport const head = (config: AttrsClassesStyles, children?) => tag(\"head\", config, children) as HTMLHeadElement;\nexport const header = (config: AttrsClassesStyles, children?) => tag(\"header\", config, children) as HTMLElement;\nexport const hr = (config: AttrsClassesStyles, children?) => tag(\"hr\", config, children) as HTMLHRElement;\nexport const html = (config: AttrsClassesStyles, children?) => tag(\"html\", config, children) as HTMLHtmlElement;\nexport const iframe = (config: AttrsClassesStyles, children?) => tag(\"iframe\", config, children) as HTMLIFrameElement;\nexport const img = (config: AttrsClassesStyles, children?) => tag(\"img\", config, children) as HTMLImageElement;\nexport const input = (config: AttrsClassesStyles, children?) => tag(\"input\", config, children) as HTMLInputElement;\nexport const ins = (config: AttrsClassesStyles, children?) => tag(\"ins\", config, children) as HTMLModElement;\nexport const label = (config: AttrsClassesStyles, children?) => tag(\"label\", config, children) as HTMLLabelElement;\nexport const legend = (config: AttrsClassesStyles, children?) => tag(\"legend\", config, children) as HTMLLegendElement;\nexport const li = (config: AttrsClassesStyles, children?) => tag(\"li\", config, children) as HTMLLIElement;\nexport const link = (config: AttrsClassesStyles, children?) => tag(\"link\", config, children) as HTMLLinkElement;\nexport const map = (config: AttrsClassesStyles, children?) => tag(\"map\", config, children) as HTMLMapElement;\nexport const marquee = (config: AttrsClassesStyles, children?) => tag(\"marquee\", config, children) as HTMLMarqueeElement;\nexport const menu = (config: AttrsClassesStyles, children?) => tag(\"menu\", config, children) as HTMLMenuElement;\nexport const meta = (config: AttrsClassesStyles, children?) => tag(\"meta\", config, children) as HTMLMetaElement;\nexport const meter = (config: AttrsClassesStyles, children?) => tag(\"meter\", config, children) as HTMLMeterElement;\nexport const object = (config: AttrsClassesStyles, children?) => tag(\"object\", config, children) as HTMLObjectElement;\nexport const ol = (config: AttrsClassesStyles, children?) => tag(\"ol\", config, children) as HTMLOListElement;\nexport const optgroup = (config: AttrsClassesStyles, children?) => tag(\"optgroup\", config, children) as HTMLOptGroupElement;\nexport const option = (config: AttrsClassesStyles, children?) => tag(\"option\", config, children) as HTMLOptionElement;\nexport const output = (config: AttrsClassesStyles, children?) => tag(\"output\", config, children) as HTMLOutputElement;\nexport const p = (config: AttrsClassesStyles, children?) => tag(\"p\", config, children) as HTMLParagraphElement;\nexport const param = (config: AttrsClassesStyles, children?) => tag(\"param\", config, children) as HTMLParamElement;\nexport const picture = (config: AttrsClassesStyles, children?) => tag(\"picture\", config, children) as HTMLPictureElement;\nexport const pre = (config: AttrsClassesStyles, children?) => tag(\"pre\", config, children) as HTMLPreElement;\nexport const progress = (config: AttrsClassesStyles, children?) => tag(\"progress\", config, children) as HTMLProgressElement;\nexport const q = (config: AttrsClassesStyles, children?) => tag(\"q\", config, children) as HTMLQuoteElement;\nexport const script = (config: AttrsClassesStyles, children?) => tag(\"script\", config, children) as HTMLScriptElement;\nexport const section = (config: AttrsClassesStyles, children?) => tag(\"section\", config, children) as HTMLElement;\nexport const select = (config: AttrsClassesStyles, children?) => tag(\"select\", config, children) as HTMLSelectElement;\nexport const slot = (config: AttrsClassesStyles, children?) => tag(\"slot\", config, children) as HTMLSlotElement;\nexport const source = (config: AttrsClassesStyles, children?) => tag(\"source\", config, children) as HTMLSourceElement;\nexport const span = (config: AttrsClassesStyles, children?) => tag(\"span\", config, children) as HTMLSpanElement;\nexport const style = (config: AttrsClassesStyles, children?) => tag(\"style\", config, children) as HTMLStyleElement;\nexport const table = (config: AttrsClassesStyles, children?) => tag(\"table\", config, children) as HTMLTableElement;\nexport const tbody = (config: AttrsClassesStyles, children?) => tag(\"tbody\", config, children) as HTMLTableSectionElement;\nexport const td = (config: AttrsClassesStyles, children?) => tag(\"td\", config, children) as HTMLTableCellElement;\nexport const template = (config: AttrsClassesStyles, children?) => tag(\"template\", config, children) as HTMLTemplateElement;\nexport const textarea = (config: AttrsClassesStyles, children?) => tag(\"textarea\", config, children) as HTMLTextAreaElement;\nexport const tfoot = (config: AttrsClassesStyles, children?) => tag(\"tfoot\", config, children) as HTMLTableSectionElement;\nexport const th = (config: AttrsClassesStyles, children?) => tag(\"th\", config, children) as HTMLTableCellElement;\nexport const thead = (config: AttrsClassesStyles, children?) => tag(\"thead\", config, children) as HTMLTableSectionElement;\nexport const time = (config: AttrsClassesStyles, children?) => tag(\"time\", config, children) as HTMLTimeElement;\nexport const title = (config: AttrsClassesStyles, children?) => tag(\"title\", config, children) as HTMLTitleElement;\nexport const tr = (config: AttrsClassesStyles, children?) => tag(\"tr\", config, children) as HTMLTableRowElement;\nexport const track = (config: AttrsClassesStyles, children?) => tag(\"track\", config, children) as HTMLTrackElement;\nexport const ul = (config: AttrsClassesStyles, children?) => tag(\"ul\", config, children) as HTMLUListElement;\nexport const video = (config: AttrsClassesStyles, children?) => tag(\"video\", config, children) as HTMLVideoElement;\n\n/*\nhow to generate the code above:\n// tagname/constructor-list from: https://stackoverflow.com/a/48048841\n\n\nfunction getAllTagNames()\n{\n    let items = [];\n\n    Object.getOwnPropertyNames(window).forEach(name =>\n    {\n        if(name.startsWith('HTML') && name.endsWith('Element') && window[name].prototype instanceof HTMLElement)\n        {\n            items.push({ constr: name, tagName: name.substr(4, name.length - 11).toLowerCase() });\n        }\n    });\n\n    items.sort((leftItem, rightItem) =>\n    {\n        let left = leftItem.tagName;\n        let right = rightItem.tagName;\n\n        if(left.toLowerCase) { left = left.toLowerCase(); }\n        if(right.toLowerCase) { right = right.toLowerCase(); }\n\n        return left == right ? 0 : (left < right ? -1 : 1);\n    });\n\n    function insertSorted(item)\n    {\n        let index = 0;\n        while(item.tagName > items[index].tagName) { index++; }\n        items.splice(index, 0, item);\n    }\n\n    let disagreements = [];\n    items = items.filter(item =>\n    {\n        let tagName = item.tagName;\n\n        switch(tagName) // deprecated\n        {\n            case \"keygen\": return false;\n        }\n\n        let filter = tagName == \"unknown\" || document.createElement(tagName).constructor == HTMLUnknownElement;\n        if(filter && tagName != \"unknown\") { disagreements.push(item); }\n\n        return !filter;\n    });\n\n    disagreements = disagreements.filter(item =>\n    {\n        switch(item.tagName) // base constructor\n        {\n            case \"media\": return false;\n        }\n\n        return true;\n    });\n\n    disagreements.forEach(item => \n    {\n        let tagName = item.tagName;\n\n        function exchange(tagName)\n        {\n            insertSorted({ constr: item.constr, tagName: tagName });\n        }\n\n        switch(tagName)\n        {\n            case 'anchor':\n                exchange('a');\n                break;\n\n            case 'directory':\n                exchange('dir');\n                break;\n\n            case 'dlist':\n                exchange('dl');\n                break;\n\n            case 'heading':\n                exchange('h1');\n                exchange('h2');\n                exchange('h3');\n                exchange('h4');\n                exchange('h5');\n                exchange('h6');\n                break;\n\n            case 'image':\n                exchange('img');\n                break;\n\n            case 'mod':\n                exchange('del');\n                exchange('ins');\n                break;\n\n            case 'olist':\n                exchange('ol');\n                break;\n\n            case 'paragraph':\n                exchange('p');\n                break;\n\n            case 'quote':\n                exchange('blockquote');\n                exchange('q');\n                break;\n\n            case 'tablecaption':\n                exchange('caption');\n                break;\n\n            case 'tablecell':\n                exchange('th');\n                exchange('td');\n                break;\n\n            case 'tablecol':\n                exchange('col');\n                exchange('colgroup');\n                break;\n\n            case 'tablerow':\n                exchange('tr');\n                break;\n\n            case 'tablesection':\n                exchange('tfoot');\n                exchange('thead');\n                exchange('tbody');\n                break;\n\n            case 'ulist':\n                exchange('ul');\n                break;\n\n            default:\n                console.log('disagree', tagName);\n                if(console.warn && tagName != \"\") { console.warn(\"unknown tag name for \" + item.constr); }\n                break;\n        }\n    });\n    insertSorted({tagName: \"header\", constr: \"HTMLElement\"})\n    insertSorted({tagName: \"footer\", constr: \"HTMLElement\"})\n    insertSorted({tagName: \"article\", constr: \"HTMLElement\"})\n    insertSorted({tagName: \"section\", constr: \"HTMLElement\"})\n    \n    return items;\n}\nconst list = getAllTagNames().map(a => `export const ${a.tagName} = (config: AttrsClassesStyles, children?) => tag(\"${a.tagName}\", config, children) as ${a.constr};`);\nconsole.log(list.join(\"\\n\"));\n\n*/"],"names":["toFlatArray","children","Array","isArray","flat","Infinity","tag","tagName","config","el","document","createElement","includes","setAttribute","className","Object","entries","forEach","key","value","assign","style","ref","append","filter","c","event","eventName","callback","HTMLElement","addEventListener","getRefs","e","refs","from","_e","a","area","article","audio","base","blockquote","body","br","button","canvas","caption","col","colgroup","data","datalist","del","details","dialog","dir","div","dl","embed","fieldset","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","img","input","ins","label","legend","li","link","map","marquee","menu","meta","meter","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","script","section","select","slot","source","span","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","ul","video"],"mappings":"AAIA,MAAMA,EAAeC,GAAyCC,MAAMC,QAAQF,GAAYA,EAASG,KAAKC,UAAY,CAACJ,GAEtGK,EAAM,CAAIC,EAAiBC,EAA6B,GAAIP,KACrE,MAAMQ,EAAKC,SAASC,cAAcJ,GAQlC,MAPsB,iBAAXC,QACPA,GAAAA,EAAQI,SAAS,KAAOH,EAAGI,aAAa,QAASL,GAAUC,EAAGK,UAAYN,EACnEA,IACPO,OAAOC,QAAQR,GAAQS,QAAQ,EAAEC,EAAKC,KAAmB,UAARD,GAAoC,iBAAVC,EAAqBJ,OAAOK,OAAOX,EAAGY,MAAOF,GAASV,EAAGI,aAAaK,EAAKC,IACtJX,EAAOc,MAASb,EAAWa,IAAMd,EAAOc,MAE5Cb,EAAGc,UAAUvB,EAAYC,GAAUuB,OAAOC,GAAKA,IACxChB,GAGEiB,EAAQ,CAAIC,EAAmBC,EAA+C3B,KACvFD,EAAYC,GAAUgB,QAAQQ,GAAKA,aAAaI,aAAeJ,EAAEK,iBAAiBH,EAAWC,IACtF3B,YAKK8B,EAAQC,EAAoCC,EAAO,IAC/D,IAAI/B,MAAMC,QAAQ6B,GAQlB,OAJAA,EAAEV,MAAQW,EAAKD,EAAEV,KAAOU,GACxB9B,MAAMgC,KAAKF,EAAE/B,UAAUgB,QAASQ,IAC5BM,EAAQN,EAAoBQ,KAEzBA,EAPHD,EAAEf,QAAQkB,GAAMJ,EAAQI,IAUnBC,MAAAA,EAAI,CAAC5B,EAA4BP,IAAcK,EAAI,IAAKE,EAAQP,GAChEoC,EAAO,CAAC7B,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEqC,EAAU,CAAC9B,EAA4BP,IAAcK,EAAI,UAAWE,EAAQP,GAC5EsC,EAAQ,CAAC/B,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEuC,EAAO,CAAChC,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEwC,EAAa,CAACjC,EAA4BP,IAAcK,EAAI,aAAcE,EAAQP,GAClFyC,EAAO,CAAClC,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtE0C,EAAK,CAACnC,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClE2C,EAAS,CAACpC,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1E4C,EAAS,CAACrC,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1E6C,EAAU,CAACtC,EAA4BP,IAAcK,EAAI,UAAWE,EAAQP,GAC5E8C,EAAM,CAACvC,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpE+C,EAAW,CAACxC,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9EgD,EAAO,CAACzC,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEiD,EAAW,CAAC1C,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9EkD,EAAM,CAAC3C,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpEmD,EAAU,CAAC5C,EAA4BP,IAAcK,EAAI,UAAWE,EAAQP,GAC5EoD,EAAS,CAAC7C,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1EqD,EAAM,CAAC9C,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpEsD,EAAM,CAAC/C,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpEuD,EAAK,CAAChD,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEwD,EAAQ,CAACjD,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEyD,EAAW,CAAClD,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9E0D,EAAO,CAACnD,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtE2D,EAAS,CAACpD,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1E4D,EAAO,CAACrD,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtE6D,EAAQ,CAACtD,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxE8D,EAAW,CAACvD,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9E+D,EAAK,CAACxD,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEgE,EAAK,CAACzD,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEiE,EAAK,CAAC1D,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEkE,EAAK,CAAC3D,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEmE,EAAK,CAAC5D,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEoE,EAAK,CAAC7D,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEqE,EAAO,CAAC9D,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEsE,EAAS,CAAC/D,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1EuE,EAAK,CAAChE,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEwE,EAAO,CAACjE,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEyE,EAAS,CAAClE,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1E0E,EAAM,CAACnE,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpE2E,EAAQ,CAACpE,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxE4E,EAAM,CAACrE,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpE6E,EAAQ,CAACtE,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxE8E,EAAS,CAACvE,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1E+E,EAAK,CAACxE,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEgF,EAAO,CAACzE,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEiF,EAAM,CAAC1E,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpEkF,EAAU,CAAC3E,EAA4BP,IAAcK,EAAI,UAAWE,EAAQP,GAC5EmF,EAAO,CAAC5E,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEoF,EAAO,CAAC7E,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEqF,GAAQ,CAAC9E,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEsF,GAAS,CAAC/E,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1EuF,GAAK,CAAChF,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEwF,GAAW,CAACjF,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9EyF,GAAS,CAAClF,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1E0F,GAAS,CAACnF,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1E2F,GAAI,CAACpF,EAA4BP,IAAcK,EAAI,IAAKE,EAAQP,GAChE4F,GAAQ,CAACrF,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxE6F,GAAU,CAACtF,EAA4BP,IAAcK,EAAI,UAAWE,EAAQP,GAC5E8F,GAAM,CAACvF,EAA4BP,IAAcK,EAAI,MAAOE,EAAQP,GACpE+F,GAAW,CAACxF,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9EgG,GAAI,CAACzF,EAA4BP,IAAcK,EAAI,IAAKE,EAAQP,GAChEiG,GAAS,CAAC1F,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1EkG,GAAU,CAAC3F,EAA4BP,IAAcK,EAAI,UAAWE,EAAQP,GAC5EmG,GAAS,CAAC5F,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1EoG,GAAO,CAAC7F,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEqG,GAAS,CAAC9F,EAA4BP,IAAcK,EAAI,SAAUE,EAAQP,GAC1EsG,GAAO,CAAC/F,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEoB,GAAQ,CAACb,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEuG,GAAQ,CAAChG,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEwG,GAAQ,CAACjG,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEyG,GAAK,CAAClG,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClE0G,GAAW,CAACnG,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9E2G,GAAW,CAACpG,EAA4BP,IAAcK,EAAI,WAAYE,EAAQP,GAC9E4G,GAAQ,CAACrG,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxE6G,GAAK,CAACtG,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClE8G,GAAQ,CAACvG,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxE+G,GAAO,CAACxG,EAA4BP,IAAcK,EAAI,OAAQE,EAAQP,GACtEgH,GAAQ,CAACzG,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEiH,GAAK,CAAC1G,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEkH,GAAQ,CAAC3G,EAA4BP,IAAcK,EAAI,QAASE,EAAQP,GACxEmH,GAAK,CAAC5G,EAA4BP,IAAcK,EAAI,KAAME,EAAQP,GAClEoH,GAAQ,CAAC7G,EAA4BP,IAAcK,EAAI,QAASE,EAAQP"}